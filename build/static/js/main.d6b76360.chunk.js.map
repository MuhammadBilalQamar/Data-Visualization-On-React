{"version":3,"sources":["Components/footer.js","Components/singleLineChart.js","Components/barChart.js","Components/multiLineChart.js","Components/datePicker.js","data/query.js","Components/layout.js","App.js","serviceWorker.js","index.js"],"names":["FooterPage","color","className","fluid","Date","getFullYear","href","SingleLineChart","props","state","d","getMonth","this","singleLineChartData","dataPoint","Labels","forEach","element","i","includes","dateFormat","DATEG","push","HOrderNetAmount","setState","dataLine","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","console","log","alert","style","fontWeight","fontStyle","textDecoration","spanGaps","height","options","responsive","React","Component","BarChart","barChartOptions","maintainAspectRatio","scales","xAxes","barPercentage","gridLines","display","yAxes","ticks","beginAtZero","barChartData","dataPoints","ITEMGROUPNAMEE","ITEMNETPRICE","dataBar","borderWidth","MultiLineChart","assignDataSetObjects","multilineChartData","Datasets","rotiDataPoints","biryaniDataPoints","tandoorDataPoints","muttonSalanDataPoints","chickenSalanDataPoints","chickenChineseDataPoints","sweetsDrinksDataPoints","vegiterianChineseDataPoints","soupsDataPoints","seaFoodDataPoints","paneerDataPoints","weekSpecialDataPoints","vegitableDataPoints","curryOnlyDataPoints","todaysDataPoints","rotiTempPrice","biryaniTempPrice","tandoorTempPrice","muttonSalanTempPrice","chickenSalanTempPrice","chickenChineseTempPrice","sweetDrinksTempPrice","vegiterianChineseTempPrice","soupsTempPrice","seaFoodTempPrice","paneerTempPrice","weekSpecialTempPrice","vegitableTempPrice","curryOnlyTempPrice","todaysTempPrice","filter","item","ITEMGROUPCODE","DateSelector","onChange","date","formatedDate","moment","format","type","getDateFrom","getDateTo","value","Query","dateFrom","dateTo","Layout","collapse","isWideEnough","isloading","isButtonShow","errorMessage","onClick","bind","myHeaders","Headers","append","urlencoded","URLSearchParams","requestOptions","method","headers","body","redirect","fetch","proxyurl","then","response","json","result","message","catch","error","fixed","dark","expand","icon","size","fontSize","isOpen","navbar","right","active","to","padding","marginTop","textAlign","boxShadow","submit","verticalAlign","role","width","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6b76360.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { MDBContainer, MDBFooter } from \"mdbreact\";\r\n\r\nconst FooterPage = () => {\r\n  return (\r\n    <MDBFooter color=\"blue\" className=\"font-small pt-4 mt-4\">\r\n      <div className=\"footer-copyright text-center py-3\">\r\n        <MDBContainer fluid >\r\n          &copy; {new Date().getFullYear()} Copyright: <a href=\"https://www.github.com/muhammadbilalqamar\"> Muhammad Bilal Designs.com </a>\r\n        </MDBContainer>\r\n      </div>\r\n    </MDBFooter>\r\n  );\r\n}\r\n\r\nexport default FooterPage;","import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { MDBContainer } from \"mdbreact\";\r\n\r\nclass SingleLineChart extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n    dateFormat(d) {\r\n        var monthShortNames = [\"January\", \"Feburary\", \"March\", \"April\", \"May\", \"June\",\r\n            \"July\", \"August\", \"September\", \"Octuber\", \"November\", \"December\"\r\n        ];\r\n        var t = new Date(d);\r\n        return monthShortNames[t.getMonth()];\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n\r\n        if (this.props.singleLineChartData) {\r\n            let dataPoint = [];\r\n            let Labels = [];\r\n            this.props.singleLineChartData.forEach((element, i) => {\r\n                if (Labels.includes(this.dateFormat(element.DATEG)) == false) {\r\n                    dataPoint.push(element.HOrderNetAmount);\r\n                    Labels.push(this.dateFormat(element.DATEG))\r\n                }\r\n            });\r\n            this.setState({\r\n                dataLine: {\r\n                    labels: Labels,\r\n                    datasets: [\r\n                        {\r\n                            label: \"Sale\",\r\n                            fill: true,\r\n                            lineTension: 0.3,\r\n                            backgroundColor: \"rgba(225, 204,230, .3)\",\r\n                            borderColor: \"rgb(205, 130, 158)\",\r\n                            borderCapStyle: \"butt\",\r\n                            borderDash: [],\r\n                            borderDashOffset: 0.0,\r\n                            borderJoinStyle: \"miter\",\r\n                            pointBorderColor: \"rgb(205, 130,1 58)\",\r\n                            pointBackgroundColor: \"rgb(255, 255, 255)\",\r\n                            pointBorderWidth: 10,\r\n                            pointHoverRadius: 5,\r\n                            pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\r\n                            pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\r\n                            pointHoverBorderWidth: 2,\r\n                            pointRadius: 1,\r\n                            pointHitRadius: 10,\r\n                            data: dataPoint\r\n                        }\r\n                    ]\r\n                }\r\n\r\n            })\r\n        }\r\n        else {\r\n            console.log(\"error in single line chart data component did mount\");\r\n            alert(\"error in single line chart data component did mount\");\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MDBContainer>\r\n                <h2 style={{ fontWeight: \"bolder\", fontStyle: \"italic\", textDecoration: \"underline\" }} className=\"mt-5\">Sales Per Month</h2>\r\n                {/* legend=false */}\r\n                <Line spanGaps={true} height={120} data={this.state.dataLine} options={{ responsive: true }} />\r\n            </MDBContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SingleLineChart;","import React from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { MDBContainer } from \"mdbreact\";\r\n\r\n\r\nclass BarChart extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            barChartOptions: {\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                scales: {\r\n                    xAxes: [\r\n                        {\r\n                            barPercentage: 1,\r\n                            gridLines: {\r\n                                display: true,\r\n                                color: \"rgba(0, 0, 0, 0.1)\"\r\n                            }\r\n                        }\r\n                    ],\r\n                    yAxes: [\r\n                        {\r\n                            gridLines: {\r\n                                display: true,\r\n                                color: \"rgba(0, 0, 0, 0.1)\"\r\n                            },\r\n                            ticks: {\r\n                                beginAtZero: true\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        \r\n        if (this.props.barChartData) {\r\n            let Labels = [];\r\n            let dataPoints = [];\r\n            this.props.barChartData.forEach(element => {\r\n                if (element.ITEMGROUPNAMEE != null) {\r\n                    Labels.push(element.ITEMGROUPNAMEE)\r\n                    dataPoints.push(element.ITEMNETPRICE)\r\n                }\r\n            });\r\n\r\n            this.setState({\r\n                dataBar: {\r\n                    labels: Labels,\r\n                    datasets: [\r\n                        {\r\n                            label: \"Item net price\",\r\n                            data: dataPoints,\r\n                            backgroundColor: [\r\n                                \"rgba(255, 134,159,0.4)\",\r\n                                \"rgba(98,  182, 239,0.4)\",\r\n                                \"rgba(255, 218, 128,0.4)\",\r\n                                \"rgba(113, 205, 205,0.4)\",\r\n                                \"rgba(170, 128, 252,0.4)\",\r\n                                \"rgba(255, 177, 101,0.4)\",\r\n                                \"rgb(255,0,255,0.4)\",\r\n                                \"rgb(0,255,0,0.4)\",\r\n                                \"rgb(128,0,0,0.4)\",\r\n                                \"rgb(128,128,0,0.4)\",\r\n                                \"rgb(128,128,128,0.4)\",\r\n                                \"rgb(255,0,0,0.4)\",\r\n                                \"rgb(0,0,0,0.4)\",\r\n                                \"rgb(0,0,128,0.4)\",\r\n                                \"rgb(0,128,128,0.4)\"\r\n\r\n                            ],\r\n                            borderWidth: 2,\r\n                            borderColor: [\r\n                                \"rgba(255, 134, 159, 1)\",\r\n                                \"rgba(98,  182, 239, 1)\",\r\n                                \"rgba(255, 218, 128, 1)\",\r\n                                \"rgba(113, 205, 205, 1)\",\r\n                                \"rgba(170, 128, 252, 1)\",\r\n                                \"rgba(255, 177, 101, 1)\",\r\n                                \"rgb(255,0,255,1)\",\r\n                                \"rgb(0,255,0,1)\",\r\n                                \"rgb(128,0,0,1)\",\r\n                                \"rgb(128,128,0,1)\",\r\n                                \"rgb(128,128,128,1)\",\r\n                                \"rgb(255,0,0,1)\",\r\n                                \"rgb(0,0,0,1)\",\r\n                                \"rgb(0,0,128,1)\",\r\n                                \"rgb(0,128,128,1)\",\r\n\r\n                            ]\r\n                        }\r\n                    ]\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <MDBContainer>\r\n                <h2 style={{ fontWeight: \"bolder\", fontStyle: \"italic\", textDecoration: \"underline\" }} className=\"mt-5\">Items Sales</h2>\r\n                <Bar height={350} data={this.state.dataBar} options={this.state.barChartOptions} />\r\n            </MDBContainer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BarChart;","import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { MDBContainer } from \"mdbreact\";\r\n\r\nclass MultiLineChart extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dataLine: {\r\n        labels: null,\r\n        datasets: null\r\n      }\r\n    }\r\n  }\r\n\r\n  dateFormat(d) {\r\n    var monthShortNames = [\"January\", \"Feburary\", \"March\", \"April\", \"May\", \"June\",\r\n      \"July\", \"August\", \"September\", \"Octuber\", \"November\", \"December\"\r\n    ];\r\n    var t = new Date(d);\r\n    return monthShortNames[t.getMonth()];\r\n  }\r\n\r\n\r\n\r\n  async componentDidMount() {\r\n\r\n    if (this.props.multilineChartData) {\r\n\r\n      let Datasets = [];\r\n      let labels = [];\r\n      let rotiDataPoints = [];\r\n      let biryaniDataPoints = [];\r\n      let tandoorDataPoints = [];\r\n      let muttonSalanDataPoints = [];\r\n      let chickenSalanDataPoints = [];\r\n      let chickenChineseDataPoints = [];\r\n      let sweetsDrinksDataPoints = [];\r\n      let vegiterianChineseDataPoints = [];\r\n      let soupsDataPoints = [];\r\n      let seaFoodDataPoints = [];\r\n      let paneerDataPoints = [];\r\n      let weekSpecialDataPoints = [];\r\n      let vegitableDataPoints = [];\r\n      let curryOnlyDataPoints = [];\r\n      let todaysDataPoints = [];\r\n\r\n      let rotiTempPrice = null;\r\n      let biryaniTempPrice = null;\r\n      let tandoorTempPrice = null;\r\n      let muttonSalanTempPrice = null;\r\n      let chickenSalanTempPrice = null;\r\n      let chickenChineseTempPrice = null;\r\n      let sweetDrinksTempPrice = null;\r\n      let vegiterianChineseTempPrice = null;\r\n      let soupsTempPrice = null;\r\n      let seaFoodTempPrice = null;\r\n      let paneerTempPrice = null;\r\n      let weekSpecialTempPrice = null;\r\n      let vegitableTempPrice = null;\r\n      let curryOnlyTempPrice = null;\r\n      let todaysTempPrice = null;\r\n\r\n      this.props.multilineChartData.filter((item, i) => {\r\n\r\n        if (this.props.multilineChartData[i + 1]) {\r\n\r\n          if (item.ITEMGROUPCODE != null) {\r\n            if (labels.includes(this.dateFormat(item.DATEG)) == false) {\r\n              labels.push(this.dateFormat(item.DATEG))\r\n            }\r\n          }\r\n\r\n          if (item.ITEMGROUPCODE == \"1001\") {\r\n            if (this.dateFormat(item.DATEG) == this.dateFormat(this.props.multilineChartData[i + 1].DATEG)) {\r\n              rotiTempPrice += item.ITEMNETPRICE;\r\n            }\r\n            else {\r\n              rotiDataPoints.push(rotiTempPrice);\r\n              rotiTempPrice = 0;\r\n            }\r\n          }\r\n          if (item.ITEMGROUPCODE == \"1002\") {\r\n            if (this.dateFormat(item.DATEG) == this.dateFormat(this.props.multilineChartData[i + 1].DATEG)) {\r\n              biryaniTempPrice += item.ITEMNETPRICE;\r\n            }\r\n            else {\r\n              biryaniDataPoints.push(biryaniTempPrice);\r\n              biryaniTempPrice = 0;\r\n            }\r\n          }\r\n          if (item.ITEMGROUPCODE == \"1003\") {\r\n\r\n            if (this.dateFormat(item.DATEG) == this.dateFormat(this.props.multilineChartData[i + 1].DATEG)) {\r\n              tandoorTempPrice += item.ITEMNETPRICE;\r\n            }\r\n            else {\r\n              tandoorDataPoints.push(tandoorTempPrice);\r\n              tandoorTempPrice = 0;\r\n\r\n            }\r\n          }\r\n          if (item.ITEMGROUPCODE == \"1004\") {\r\n            if (this.dateFormat(item.DATEG) == this.dateFormat(this.props.multilineChartData[i + 1].DATEG)) {\r\n              muttonSalanTempPrice += item.ITEMNETPRICE;\r\n            }\r\n            else {\r\n              muttonSalanDataPoints.push(muttonSalanTempPrice);\r\n              muttonSalanTempPrice = 0;\r\n\r\n            }\r\n\r\n          }\r\n          if (item.ITEMGROUPCODE == \"1005\") {\r\n            if (this.dateFormat(item.DATEG) == this.dateFormat(this.props.multilineChartData[i + 1].DATEG)) {\r\n              chickenSalanTempPrice += item.ITEMNETPRICE;\r\n            }\r\n            else {\r\n              chickenSalanDataPoints.push(chickenSalanTempPrice);\r\n              chickenSalanTempPrice = 0;\r\n\r\n            }\r\n          }\r\n          if (item.ITEMGROUPCODE == \"1006\") {\r\n            if (this.dateFormat(item.DATEG) == this.dateFormat(this.props.multilineChartData[i + 1].DATEG)) {\r\n              chickenChineseTempPrice += item.ITEMNETPRICE;\r\n            }\r\n            else {\r\n              chickenChineseDataPoints.push(chickenChineseTempPrice);\r\n              chickenChineseTempPrice = 0;\r\n            }\r\n\r\n          }\r\n          if (item.ITEMGROUPCODE == \"1007\") {\r\n            if (this.dateFormat(item.DATEG) == this.dateFormat(this.props.multilineChartData[i + 1].DATEG)) {\r\n              sweetDrinksTempPrice += item.ITEMNETPRICE;\r\n            }\r\n            else {\r\n              sweetsDrinksDataPoints.push(sweetDrinksTempPrice);\r\n              sweetDrinksTempPrice = 0;\r\n            }\r\n\r\n          }\r\n          if (item.ITEMGROUPCODE == \"1008\") {\r\n            if (this.dateFormat(item.DATEG) == this.dateFormat(this.props.multilineChartData[i + 1].DATEG)) {\r\n              vegiterianChineseTempPrice += item.ITEMNETPRICE;\r\n            }\r\n            else {\r\n              vegiterianChineseDataPoints.push(vegiterianChineseTempPrice);\r\n              vegiterianChineseTempPrice = 0;\r\n            }\r\n\r\n          }\r\n          if (item.ITEMGROUPCODE == \"1010\") {\r\n            if (this.dateFormat(item.DATEG) == this.dateFormat(this.props.multilineChartData[i + 1].DATEG)) {\r\n              soupsTempPrice += item.ITEMNETPRICE;\r\n            }\r\n            else {\r\n              soupsDataPoints.push(soupsTempPrice);\r\n              soupsTempPrice = 0;\r\n            }\r\n          }\r\n          if (item.ITEMGROUPCODE == \"1011\") {\r\n            if (this.dateFormat(item.DATEG) == this.dateFormat(this.props.multilineChartData[i + 1].DATEG)) {\r\n              seaFoodTempPrice += item.ITEMNETPRICE;\r\n            }\r\n            else {\r\n              seaFoodDataPoints.push(seaFoodTempPrice);\r\n              seaFoodTempPrice = 0;\r\n            }\r\n          }\r\n          if (item.ITEMGROUPCODE == \"1012\") {\r\n            if (this.dateFormat(item.DATEG) == this.dateFormat(this.props.multilineChartData[i + 1].DATEG)) {\r\n              paneerTempPrice += item.ITEMNETPRICE;\r\n            }\r\n            else {\r\n              paneerDataPoints.push(paneerTempPrice);\r\n              paneerTempPrice = 0;\r\n            }\r\n          }\r\n          if (item.ITEMGROUPCODE == \"1013\") {\r\n            if (this.dateFormat(item.DATEG) == this.dateFormat(this.props.multilineChartData[i + 1].DATEG)) {\r\n              weekSpecialTempPrice += item.ITEMNETPRICE;\r\n            }\r\n            else {\r\n              weekSpecialDataPoints.push(weekSpecialTempPrice);\r\n              weekSpecialTempPrice = 0;\r\n            }\r\n          }\r\n          if (item.ITEMGROUPCODE == \"1014\") {\r\n            if (this.dateFormat(item.DATEG) == this.dateFormat(this.props.multilineChartData[i + 1].DATEG)) {\r\n              vegitableTempPrice += item.ITEMNETPRICE;\r\n            }\r\n            else {\r\n              vegitableDataPoints.push(vegitableTempPrice);\r\n              vegitableTempPrice = 0;\r\n\r\n            }\r\n          }\r\n          if (item.ITEMGROUPCODE == \"1015\") {\r\n            if (this.dateFormat(item.DATEG) == this.dateFormat(this.props.multilineChartData[i + 1].DATEG)) {\r\n              curryOnlyTempPrice += item.ITEMNETPRICE;\r\n            }\r\n            else {\r\n              curryOnlyDataPoints.push(curryOnlyTempPrice);\r\n              curryOnlyTempPrice = 0;\r\n            }\r\n          }\r\n          if (item.ITEMGROUPCODE == \"1016\") {\r\n            if (this.dateFormat(item.DATEG) == this.dateFormat(this.props.multilineChartData[i + 1].DATEG)) {\r\n              todaysTempPrice += item.ITEMNETPRICE;\r\n            }\r\n            else {\r\n              todaysDataPoints.push(todaysTempPrice);\r\n              todaysTempPrice = 0;\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      Datasets.push(this.assignDataSetObjects(\"roti\", rotiDataPoints, \"coral\", \"gray\"))\r\n      Datasets.push(this.assignDataSetObjects(\"biryani\", biryaniDataPoints, \"turquoise\", \"gray\"))\r\n      Datasets.push(this.assignDataSetObjects(\"tandoor\", tandoorDataPoints, \"lightpink\", \"black\"))\r\n      Datasets.push(this.assignDataSetObjects(\"mutton sallan\", muttonSalanDataPoints, \"red\", \"red\"))\r\n\r\n      Datasets.push(this.assignDataSetObjects(\"chicken sallan\", chickenSalanDataPoints, \"#fee140\", \"#fee140\"))\r\n      Datasets.push(this.assignDataSetObjects(\"chicken chinese\", chickenChineseDataPoints, \"#b490ca\", \"#b490ca\"))\r\n      Datasets.push(this.assignDataSetObjects(\"sweet drinks\", sweetsDrinksDataPoints, \"#38f9d7\", \"#38f9d7\"))\r\n      Datasets.push(this.assignDataSetObjects(\"vegiterian chinese\", vegiterianChineseDataPoints, \"#2575fc\", \"#2575fc\"))\r\n\r\n      Datasets.push(this.assignDataSetObjects(\"soups\", soupsDataPoints, \"#2E40A3\", \"#2E40A3\"))\r\n      Datasets.push(this.assignDataSetObjects(\"sea food\", seaFoodDataPoints, \"#1FE331\", \"#1FE331\"))\r\n      Datasets.push(this.assignDataSetObjects(\"paneer\", paneerDataPoints, \"#D0F500\", \"#D0F500\"))\r\n      Datasets.push(this.assignDataSetObjects(\"week special\", weekSpecialDataPoints, \"#00ff7f\", \"#00ff7f\"))\r\n\r\n      Datasets.push(this.assignDataSetObjects(\"vegitable\", vegitableDataPoints, \"#EB6BDD\", \"#EB6BDD\"))\r\n      Datasets.push(this.assignDataSetObjects(\"curry only\", curryOnlyDataPoints, \"#E56E11\", \"#E56E11\"))\r\n      Datasets.push(this.assignDataSetObjects(\"today's\", todaysDataPoints, \"#00FAB2\", \"#00FAB2\"))\r\n\r\n      this.setState({\r\n        dataLine: {\r\n          labels: labels,\r\n          datasets: Datasets\r\n        }\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  assignDataSetObjects = (label, dataPoints, backgroundColor, borderColor) => {\r\n    let obj = {\r\n      label: label,\r\n      fill: true,\r\n      lineTension: 0.3,\r\n      backgroundColor: backgroundColor,\r\n      borderColor: borderColor,\r\n      borderCapStyle: \"butt\",\r\n      borderDash: [],\r\n      borderDashOffset: 0.0,\r\n      borderJoinStyle: \"miter\",\r\n      // pointBorderColor: \"rgb(205, 130,1 58)\",\r\n      // pointBackgroundColor: \"rgb(255, 255, 255)\",\r\n      pointBorderWidth: 10,\r\n      pointHoverRadius: 5,\r\n      pointHoverBackgroundColor: \"rgb(0, 0, 0)\",\r\n      pointHoverBorderColor: \"rgba(220, 220, 220,1)\",\r\n      pointHoverBorderWidth: 2,\r\n      pointRadius: 0.2,\r\n      pointHitRadius: 10,\r\n      data: dataPoints\r\n    }\r\n    // console.log(obj)\r\n    return obj;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <MDBContainer>\r\n        <h3 className=\"mt-5\">Line chart</h3>\r\n        <Line data={this.state.dataLine} options={{ responsive: true }} />\r\n      </MDBContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MultiLineChart;\r\n\r\n","import React, { Component } from 'react';\r\nimport DatePicker from 'react-date-picker';\r\nimport moment from 'moment'\r\n\r\nexport default class DateSelector extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date(),\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    onChange = date => {\r\n        let formatedDate = moment(date).format('DD-MMM-YYYY');\r\n        if (this.props.type == \"from\") {\r\n            this.props.getDateFrom(formatedDate);\r\n            this.setState({ date })\r\n        }\r\n        if (this.props.type == \"to\") {\r\n            this.props.getDateTo(formatedDate);\r\n            this.setState({ date })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <DatePicker\r\n                    onChange={this.onChange}\r\n                    value={this.state.date}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}","const Query = (dateFrom, dateTo) => {\r\n\r\n    return `declare @DateFrom nvarchar(12)\\ndeclare @DateTo nvarchar(12)\\nSET @DateFrom = '${dateFrom}'\\nSET @DateTo = '${dateTo}'\\nSELECT COUNT(*)ASDAYS,SUM(SESSIONCOUNT) SESSIONCOUNT,SUM(ORDERS)ORDERS,SUM(HOrderNetAmount)HOrderNetAmount,SUM(TaxAmount)TaxAmount,SUM(GrossWTax)GrossWTax  FROM V_SalesSumByDate where DATEG BETWEEN @DateFrom AND @DateTo\\nSELECT DATEG,ITEMGROUPCODE,ITEMGROUPNAMEE,SUM(ITEMNETPRICE)ITEMNETPRICE FROM V_SalesSumByItems\\nwhere DATEG BETWEEN @DateFrom AND @DateTo\\nGROUP BY DATEG, ITEMGROUPCODE,ITEMGROUPNAMEE ORDER BY ITEMGROUPCODE\\nSELECT ITEMGROUPCODE,ITEMGROUPNAMEE,SUM(ITEMNETPRICE)ITEMNETPRICE FROM V_SalesSumByItems\\nwhere DATEG BETWEEN @DateFrom AND @DateTo\\nGROUP BY ITEMGROUPCODE,ITEMGROUPNAMEE ORDER BY ITEMGROUPCODE\\nSELECT  ItemCode,ItemDescription,SUM(ITEMQTY)ITEMQTY,SUM(ITEMNETPRICE)ITEMNETPRICE FROM V_SalesSumByItems\\nwhere DATEG BETWEEN @DateFrom AND @DateTo\\nGROUP BY ITEMCODE,ITEMDESCRIPTION ORDER BY ItemNetPrice desc\\nSELECT DATEG,HOrderNetAmount FROM V_SalesSumByDate where DATEG BETWEEN @DateFrom AND @DateTo`\r\n}\r\n\r\nexport default Query;","import React from 'react';\r\nimport { MDBNavbar, MDBNavbarBrand, MDBIcon, MDBRow, MDBBtn, MDBCol, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBNavLink, MDBContainer, MDBMask, MDBView } from 'mdbreact';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport FooterPage from './footer'\r\nimport SingleLineChart from './singleLineChart';\r\nimport BarChart from './barChart';\r\nimport MultiLineChart from './multiLineChart';\r\nimport DatePicker from './datePicker'\r\nimport Query from '../data/query';\r\n\r\n\r\n\r\n\r\nclass Layout extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      collapse: false,\r\n      isWideEnough: false,\r\n      labels: null,\r\n      dataPoints: [0, 0],\r\n      isloading: false,\r\n      isButtonShow: true,\r\n      barChartData: null,\r\n      singleLineChartData: null,\r\n      multilineChartData: null,\r\n      dateFrom: null,\r\n      dateTo: null,\r\n      errorMessage: null\r\n    };\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n\r\n  onClick() {\r\n    this.setState({\r\n      collapse: !this.state.collapse,\r\n    });\r\n  }\r\n\r\n\r\n  async componentDidMount() {\r\n\r\n\r\n  }\r\n\r\n\r\n  getDateFrom(date) {\r\n    this.setState({\r\n      dateFrom: date\r\n    })\r\n  }\r\n\r\n  getDateTo(date) {\r\n    this.setState({\r\n      dateTo: date\r\n    })\r\n  }\r\n\r\n  async submit() {\r\n\r\n    let { dateFrom, dateTo, isloading, barChartData, singleLineChartData, multilineChartData, errorMessage } = this.state;\r\n    this.setState({\r\n      isloading: true,\r\n      isButtonShow: false\r\n    });\r\n\r\n    let proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n    let myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    let urlencoded = new URLSearchParams();\r\n    urlencoded.append(\"identifier\", \"KKJED\");\r\n    urlencoded.append(\"query\", Query(dateFrom, dateTo));\r\n    let requestOptions = {\r\n      method: 'POST',\r\n      headers: myHeaders,\r\n      body: urlencoded,\r\n      redirect: 'follow'\r\n    };\r\n    await fetch(proxyurl + \"http://192.236.178.77:3001/\", requestOptions)\r\n      .then(response => response.json())\r\n      .then(result => {\r\n        barChartData = result[2];\r\n        singleLineChartData = result[4];\r\n        multilineChartData = result[1];\r\n        console.log(\"complete result\", result);\r\n        if (result.message) {\r\n          errorMessage = result.message;\r\n        }\r\n      })\r\n      .catch(error => console.log('error', error));\r\n    this.setState({\r\n      isloading: false,\r\n      isButtonShow: true,\r\n      singleLineChartData,\r\n      multilineChartData,\r\n      barChartData,\r\n      errorMessage\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <header>\r\n          <Router >\r\n            <MDBNavbar color=\"bg-primary\" fixed=\"top\" dark expand=\"md\">\r\n              <MDBNavbarBrand href=\"/\">\r\n                <MDBIcon icon=\"gem\" size=\"2x\">\r\n                  <b style={{ fontSize: \"30px\" }}>Data Visualization</b>\r\n                </MDBIcon>\r\n              </MDBNavbarBrand>\r\n              {!this.state.isWideEnough && <MDBNavbarToggler onClick={this.onClick} />}\r\n              <MDBCollapse isOpen={this.state.collapse} navbar>\r\n                <MDBNavbarNav right>\r\n                  <MDBNavItem active>\r\n                    <MDBNavLink to=\"#\">Dashboard</MDBNavLink>\r\n                  </MDBNavItem>\r\n                </MDBNavbarNav>\r\n              </MDBCollapse>\r\n            </MDBNavbar>\r\n          </Router>\r\n\r\n        </header>\r\n\r\n        <main style={{ backgroundColor: \"#ededee\" }}>\r\n          <div style={{ padding: 10, marginTop: 70 }}>\r\n\r\n\r\n\r\n            {/* DATE FIELDS RENDRING */}\r\n            <MDBContainer>\r\n              <MDBRow style={{ backgroundColor: \"white\", marginTop: 40, padding: 20, textAlign: \"center\", boxShadow: \"0 2px 5px 0 rgba(0,0,0,.16), 0 2px 10px 0 rgba(0,0,0,.12)\" }} >\r\n\r\n                <MDBCol >\r\n                  <span style={{ fontWeight: \"bolder\", fontSize: 20 }}>Date from</span> <DatePicker type={\"from\"} getDateFrom={(date) => this.getDateFrom(date)} />\r\n                </MDBCol>\r\n\r\n                <MDBCol>\r\n                  <span style={{ fontWeight: \"bolder\", fontSize: 20 }}>Date To</span> <DatePicker type={\"to\"} getDateTo={(date) => { this.getDateTo(date) }} />\r\n                </MDBCol>\r\n\r\n                <MDBCol>\r\n                  {this.state.isButtonShow == true && <MDBBtn color=\"info\" onClick={() => { this.submit() }}>Submit</MDBBtn>}\r\n\r\n                </MDBCol>\r\n\r\n              </MDBRow>\r\n            </MDBContainer>\r\n\r\n            {/* LODER WHILE DATA IS LOADING */}\r\n\r\n            {this.state.isloading ?\r\n              <div style={{ textAlign: \"center\", verticalAlign: \"center\", height: \"100vh\", padding: 180 }}>\r\n                <div className=\"spinner-grow text-info\" role=\"status\" style={{ height: 200, width: 200 }}>\r\n                  <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n                <h3 style={{ fontStyle: \"italic\", fontWeight: \"bolder\" }}>Please wait for 2min approx while data is loading......</h3>\r\n              </div>\r\n\r\n              : <MDBContainer className=\"text-center my-5\">\r\n\r\n                {/* SINGLE LINE CHART RENDERING */}\r\n                <div style={{ backgroundColor: \"white\", boxShadow: \"0 2px 5px 0 rgba(0,0,0,.16), 0 2px 10px 0 rgba(0,0,0,.12)\" }}>\r\n                  {/* {this.state.labels != null && <SingleLineChart labels={this.state.labels} dataPoints={this.state.dataPoints} />} */}\r\n                  {this.state.singleLineChartData != null && <SingleLineChart singleLineChartData={this.state.singleLineChartData} />}\r\n\r\n                </div>\r\n\r\n                {/* BAR CHART RENDERING */}\r\n                <div style={{ backgroundColor: \"white\", boxShadow: \"0 2px 5px 0 rgba(0,0,0,.16), 0 2px 10px 0 rgba(0,0,0,.12)\" }}>\r\n                  {this.state.barChartData != null && <BarChart barChartData={this.state.barChartData} />}\r\n                </div>\r\n\r\n                {/* MULTILINE LINE CHART RENDERING */}\r\n                <div style={{ backgroundColor: \"white\", boxShadow: \"0 2px 5px 0 rgba(0,0,0,.16), 0 2px 10px 0 rgba(0,0,0,.12)\" }}>\r\n                  {this.state.multilineChartData != null && <MultiLineChart multilineChartData={this.state.multilineChartData} />}\r\n                </div>\r\n\r\n\r\n                {/* ERROR MESSAGE WHILE DATA DOES NOT EXISTS */}\r\n\r\n                <div style={{ backgroundColor: \"white\", boxShadow: \"0 2px 5px 0 rgba(0,0,0,.16), 0 2px 10px 0 rgba(0,0,0,.12)\" }}>\r\n                  {this.state.errorMessage != null && <h1>{this.state.errorMessage}</h1>}\r\n                </div>\r\n\r\n              </MDBContainer>}\r\n\r\n          </div>\r\n          {this.state.singleLineChartData != null && <FooterPage />}\r\n\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Layout;","import React from \"react\";\r\nimport Layout from \"./Components/layout\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n   \r\n\r\n    }\r\n  }\r\n  async componentDidMount() {\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layout />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n//  FOR BOOTSTRAP LINKS\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}